# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action

name: Unofficial Coverity Scan
description: Run Coverity Scan and upload the results.

inputs:
  project:
    description: Project name in Coverity Scan.
    default: ${{ github.repository }}
    required: false

  token:
    description: Secret project token for accessing Coverity Scan.
    required: true

  email:
    description: Where Coverity Scan should send notifications.
    required: true

  build_language:
    description: Which Coverity Scan language pack to download.
    default: cxx
    required: false

  build_platform:
    description: Which Coverity Scan platform pack to download.
    default: linux64
    required: false

  command:
    description: Command to pass to cov-build.
    default: make
    required: false

  working-directory:
    description: Working directory to set for all steps.
    default: ${{ github.workspace }}
    required: false

  version:
    description: (Informational) The source version being built.
    default: ${{ github.sha }}
    required: false

  description:
    description: (Informational) A description for this particular build.
    default: coverity-scan-action ${{ github.repository }} / ${{ github.ref }}
    required: false

  ignore-missing-tokens:
    description: Suppress complaint about missing email/token
    default: ''
    required: false

runs:
  using: composite
  steps:
    # Check for required inputs
    - name: Check for required inputs
      id: required-inputs
      env:
        EMAIL: ${{ inputs.email }}
        TOKEN: ${{ inputs.token }}
      run:
        echo "::set-output name=configured::${{ env.EMAIL != '' && env.TOKEN != '' }}"
      shell: bash

    - name: Report not configured
      env:
        QUIET: ${{ inputs.ignore-missing-tokens }}
        GH_ACTION_REPOSITORY: ${{ github.action_repository }}
        GH_ACTION_REF: ${{ github.action_ref }}
      if: steps.required-inputs.outputs.configured != 'true' && env.QUIET == ''
      run: echo "::notice title=Coverity action is not configured::${GH_ACTION_REPOSITORY:-$GITHUB_REPOSITORY}@${GH_ACTION_REF:-$GITHUB_REF_NAME} wasn't configured with email/token and thus can't set up Coverity reporting."
      shell: bash

    # Need to encode the project name when using in URLs and HTTP forms.  Valid
    # GitHub project names only have / that need encoding and
    # Coverity projects with spaces in their names need encoding so do
    # an ad-hoc conversion here.  Wait to see if anyone needs something else.
    - name: URL encode project name
      if: steps.required-inputs.outputs.configured == 'true'
      id: project
      run: echo "project=${{ inputs.project }}" | sed -e 's:/:%2F:g' -e 's/ /%20/g' >> $GITHUB_OUTPUT
      shell: bash

    # The Coverity site says the tool is usually updated twice yearly, so the
    # md5 of download can be used to determine whether there's been an update.
    - name: Lookup Coverity Build Tool hash
      id: coverity-cache-lookup
      if: steps.required-inputs.outputs.configured == 'true'
      run: |
        hash=$(curl https://scan.coverity.com/download/${{ inputs.build_language }}/${{ inputs.build_platform }} \
                 --data "token=${TOKEN}&project=${{ steps.project.outputs.project }}&md5=1"); \
        echo "hash=${hash}" >> $GITHUB_OUTPUT
      shell: bash
      env:
        TOKEN: ${{ inputs.token }}

    # Try to cache the tool to avoid downloading 1GB+ archive on every run.
    # Cache miss will add ~30s to create, but cache hit will save minutes.
    - name: Cache Coverity Build Tool
      if: steps.required-inputs.outputs.configured == 'true'
      id: cov-build-cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.working-directory }}/cov-analysis
        key: cov-build-${{ inputs.build_language }}-${{ inputs.build_platform }}-${{ steps.coverity-cache-lookup.outputs.hash }}

    - name: Install Coverity Build Tool (${{ inputs.build_language }} / ${{ inputs.build_platform }})
      if: steps.required-inputs.outputs.configured == 'true' && steps.cov-build-cache.outputs.cache-hit != 'true'
      run: |
        curl https://scan.coverity.com/download/${{ inputs.build_language }}/${{ inputs.build_platform }} \
          --no-progress-meter \
          --output cov-analysis.tar.gz \
          --data "token=${TOKEN}&project=${{ steps.project.outputs.project }}" &&
        mkdir cov-analysis &&
        tar -xzf cov-analysis.tar.gz --strip 1 -C cov-analysis
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        TOKEN: ${{ inputs.token }}

    - name: Build with cov-build
      if: steps.required-inputs.outputs.configured == 'true'
      run: |
        export PATH="${PWD}/cov-analysis/bin:${PATH}"
        cov-build --dir cov-int ${{ inputs.command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Archive results
      if: steps.required-inputs.outputs.configured == 'true'
      run: tar -czvf cov-int.tgz cov-int
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Submit results to Coverity Scan
      if: steps.required-inputs.outputs.configured == 'true'
      run: |
        curl \
          --form token="${TOKEN}" \
          --form email="${{ inputs.email }}" \
          --form file=@cov-int.tgz \
          --form version="${{ inputs.version }}" \
          --form description="${{ inputs.description }}" \
          "https://scan.coverity.com/builds?project=${{ steps.project.outputs.project }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        TOKEN: ${{ inputs.token }}
